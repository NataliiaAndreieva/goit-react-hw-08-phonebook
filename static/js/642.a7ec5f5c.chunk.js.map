{"version":3,"file":"static/js/642.a7ec5f5c.chunk.js","mappings":"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","sources":["components/RegisterForm/RegisterForm.styled.js","components/Section/Section.styled.js","components/Section/Section.jsx","components/helped/getNotification.js","redux/selectors.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.js","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/Contacts/Contacts.styled.js","pages/Contacts/Contacts.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Form = styled.form`\n  display: flex;\n  align-items: center;\n  gap: 20px;\n  flex-direction: column;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 7px;\n  font-size: 18px;\n`;\n\nexport const Input = styled.input`\n  height: 35px;\n  width: 300px;\n  font-size: 18px;\n  background-color: transparent;\n  border: 2px solid #1e90ff;\n  border-radius: 5px;\n`;\n\nexport const Button = styled.button`\n  text-align: center;\n\n  width: 120px;\n  font-size: 18px;\n\n  background-color: transparent;\n\n  border: 2px solid #1e90ff;\n  border-radius: 5px;\n\n  padding: 10px 0;\n\n  &:hover {\n    color: #000000;\n    background-color: #1e90ff;\n  }\n`;\n\n","import styled from '@emotion/styled';\n\nexport const Title = styled.h2`\n  font-size: 30px;\n  color: #1e90ff;\n  text-align: center;\n  margin: 0 0 30px 0;\n`;\n\n","import PropTypes from 'prop-types';\nimport { Title } from './Section.styled';\n\nfunction Section({ title, children }) {\n  return (\n    <section>\n      <Title>{title}</Title>\n      {children}\n    </section>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nexport default Section;\n","import Notiflix from 'notiflix';\n\nexport const getNotification = message => {\n  Notiflix.Report.warning('Warning', message);\n};\n\nNotiflix.Report.init({\n  svgSize: '50px',\n  messageFontSize: '20px',\n  warning: {\n    svgColor: '#44728f',\n\n    buttonBackground: '#44728f',\n    backOverlayColor: 'rgba(0,0, 0,0.2)',\n  },\n});\n","export const getContacts = state => state.contacts;\n\nexport const getFilter = state => state.filter;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from '@reduxjs/toolkit';\n\nimport { addContact } from 'redux/operations';\nimport { getContacts } from 'redux/selectors';\nimport { getNotification } from 'components/helped/getNotification';\nimport {\n  Button,\n  Form,\n  Input,\n  Label,\n} from 'components/RegisterForm/RegisterForm.styled';\n\nfunction ContactForm() {\n  const { contactsItem } = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    const form = evt.target;\n    const { name, number } = form.elements;\n\n    const newContact = {\n      id: nanoid(),\n      name: name.value,\n      number: number.value,\n    };\n    if (contactsItem.some(contact => contact.name === name.value)) {\n      getNotification(`${name.value} уже є у контактах.`);\n    } else {\n      dispatch(addContact(newContact));\n    }\n    form.reset();\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Label>\n        Ім'я\n        <Input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я\\s]+$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </Label>\n      <Label>\n        Номер\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?[0-9\\s\\-\\(\\)]+\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </Label>\n      <Button type=\"submit\">Додати контакт</Button>\n    </Form>\n  );\n}\n\nexport default ContactForm;\n","import styled from '@emotion/styled';\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 7px;\n  font-size: 18px;\n`;\n\nexport const Input = styled.input`\n  height: 35px;\n  width: 300px;\n  font-size: 18px;\n  background-color: transparent;\n  border: 2px solid #1e90ff;\n  border-radius: 5px;\n`;\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`;\n\nexport const Item = styled.li`\n  display: flex;\n  gap: 20px;\n\n  font-size: 18px;\n`;\n\nexport const InfoContact = styled.p`\n  margin: 0;\n`;\n\nexport const Button = styled.button`\n  text-align: center;\n\n  width: 100px;\n  font-size: 18px;\n\n  background-color: transparent;\n\n  border: 2px solid #1e90ff;\n  border-radius: 5px;\n\n  &:hover {\n    color: #000000;\n    background-color: #1e90ff;\n  }\n`;\n\n\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\n\nimport { fetchContacts, deleteContact } from 'redux/operations';\nimport { getContacts, getFilter } from 'redux/selectors';\nimport {\n  Button,\n  InfoContact,\n  Item,\n  List,\n} from 'components/Filter/Filter.styled';\n\nexport function ContactList() {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n  const { contactsItem, isLoading, error } = useSelector(getContacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const getFilterContact = () => {\n    const normalizedFilter = filter.toLowerCase().trim();\n    return contactsItem.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n\n  const visibleContacts = getFilterContact();\n\n  return (\n    <List>\n      {isLoading && <p>Завантаження контактів...</p>}\n      {error && <p>{error}</p>}\n      {contactsItem.length > 0 ? (\n        visibleContacts.map(({ id, name, number }) => (\n          <Item key={id}>\n            <InfoContact>\n              <span>{name}: </span>\n              <span>{number}</span>\n            </InfoContact>\n            <Button type=\"button\" onClick={() => dispatch(deleteContact(id))}>\n              <span>Видалити</span>\n            </Button>\n          </Item>\n        ))\n      ) : (\n        <Item>Список контактів порожній. Додайте контакт</Item>\n      )}\n    </List>\n  );\n}\nexport default ContactList;\n","import { useDispatch, useSelector } from 'react-redux';\n\nimport { setFilter } from 'redux/filterSlice';\nimport { getFilter } from 'redux/selectors';\nimport { Input, Label } from './Filter.styled';\n\nfunction Filter() {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const onChangeFilter = evt => {\n    dispatch(setFilter(evt.target.value));\n  };\n\n  return (\n    <div>\n      <Label>\n        Знайдіть контакт за іменем\n        <Input type=\"text\" onChange={onChangeFilter} value={filter} />\n      </Label>\n    </div>\n  );\n};\n\nexport default Filter;\n","import styled from '@emotion/styled';\n\nexport const ContactsContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 30px;\n  padding-left: 50px;\n  padding-right: 50px;\n`;\n\n","import { useSelector } from 'react-redux';\n\nimport { getContacts } from 'redux/selectors';\nimport  ContactForm  from 'components/ContactForm';\nimport  ContactList  from 'components/ContactList';\nimport  Filter  from 'components/Filter';\nimport Section  from 'components/Section';\nimport { ContactsContainer } from './Contacts.styled';\n\nconst Contacts = () => {\n  const { isLoading, error } = useSelector(getContacts);\n  return (\n    <ContactsContainer>\n      <Section title={'Додати контакт'}>\n        <ContactForm />\n      </Section>\n      {isLoading && !error && <b>Запит виконується...</b>}\n      <Section title={'Мої контакти'}>\n        <Filter />\n        <ContactList />\n      </Section>\n    </ContactsContainer>\n  );\n};\n\nexport default Contacts;\n"],"names":["Form","styled","Label","Input","Button","Title","title","children","getNotification","message","Notiflix","svgSize","messageFontSize","warning","svgColor","buttonBackground","backOverlayColor","getContacts","state","contacts","getFilter","filter","contactsItem","useSelector","dispatch","useDispatch","onSubmit","evt","preventDefault","form","target","elements","name","number","newContact","id","nanoid","value","some","contact","addContact","reset","type","pattern","required","List","Item","InfoContact","isLoading","error","useEffect","fetchContacts","visibleContacts","normalizedFilter","toLowerCase","trim","includes","getFilterContact","length","map","onClick","deleteContact","onChange","setFilter","ContactsContainer","Section"],"sourceRoot":""}